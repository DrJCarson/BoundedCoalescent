// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_BoundedCoalescent_RCPPEXPORTS_H_GEN_
#define RCPP_BoundedCoalescent_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace BoundedCoalescent {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("BoundedCoalescent", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("BoundedCoalescent", "_BoundedCoalescent_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in BoundedCoalescent");
            }
        }
    }

    inline Rcpp::NumericVector forward_algorithm_c(Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double Ne, double bound) {
        typedef SEXP(*Ptr_forward_algorithm_c)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_forward_algorithm_c p_forward_algorithm_c = NULL;
        if (p_forward_algorithm_c == NULL) {
            validateSignature("Rcpp::NumericVector(*forward_algorithm_c)(Rcpp::NumericVector,Rcpp::IntegerVector,double,double)");
            p_forward_algorithm_c = (Ptr_forward_algorithm_c)R_GetCCallable("BoundedCoalescent", "_BoundedCoalescent_forward_algorithm_c");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_forward_algorithm_c(Shield<SEXP>(Rcpp::wrap(times)), Shield<SEXP>(Rcpp::wrap(leaves)), Shield<SEXP>(Rcpp::wrap(Ne)), Shield<SEXP>(Rcpp::wrap(bound)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline double homochronous_probability(int i, int j, double dt, double Ne) {
        typedef SEXP(*Ptr_homochronous_probability)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_homochronous_probability p_homochronous_probability = NULL;
        if (p_homochronous_probability == NULL) {
            validateSignature("double(*homochronous_probability)(int,int,double,double)");
            p_homochronous_probability = (Ptr_homochronous_probability)R_GetCCallable("BoundedCoalescent", "_BoundedCoalescent_homochronous_probability");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_homochronous_probability(Shield<SEXP>(Rcpp::wrap(i)), Shield<SEXP>(Rcpp::wrap(j)), Shield<SEXP>(Rcpp::wrap(dt)), Shield<SEXP>(Rcpp::wrap(Ne)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_BoundedCoalescent_RCPPEXPORTS_H_GEN_
