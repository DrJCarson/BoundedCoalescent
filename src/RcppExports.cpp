// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// constrain_coalescences_c
double constrain_coalescences_c(Rcpp::IntegerVector sample, Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double ne, double bound, Rcpp::NumericVector const_lower, Rcpp::NumericVector const_upper, Rcpp::IntegerVector const_lineages, Rcpp::IntegerVector const_events);
RcppExport SEXP _BoundedCoalescent_constrain_coalescences_c(SEXP sampleSEXP, SEXP timesSEXP, SEXP leavesSEXP, SEXP neSEXP, SEXP boundSEXP, SEXP const_lowerSEXP, SEXP const_upperSEXP, SEXP const_lineagesSEXP, SEXP const_eventsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type const_lower(const_lowerSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type const_upper(const_upperSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type const_lineages(const_lineagesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type const_events(const_eventsSEXP);
    rcpp_result_gen = Rcpp::wrap(constrain_coalescences_c(sample, times, leaves, ne, bound, const_lower, const_upper, const_lineages, const_events));
    return rcpp_result_gen;
END_RCPP
}
// homochronous_probability
double homochronous_probability(int i, int j, double dt, double ne);
RcppExport SEXP _BoundedCoalescent_homochronous_probability(SEXP iSEXP, SEXP jSEXP, SEXP dtSEXP, SEXP neSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    rcpp_result_gen = Rcpp::wrap(homochronous_probability(i, j, dt, ne));
    return rcpp_result_gen;
END_RCPP
}
// forward_algorithm_c
void forward_algorithm_c(Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double ne, double bound, Rcpp::NumericVector forward_probs);
RcppExport SEXP _BoundedCoalescent_forward_algorithm_c(SEXP timesSEXP, SEXP leavesSEXP, SEXP neSEXP, SEXP boundSEXP, SEXP forward_probsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type forward_probs(forward_probsSEXP);
    forward_algorithm_c(times, leaves, ne, bound, forward_probs);
    return R_NilValue;
END_RCPP
}
// backward_sampler_c
double backward_sampler_c(Rcpp::NumericVector forward_probs, Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double ne, double bound, Rcpp::IntegerVector lineages, int bound_size);
RcppExport SEXP _BoundedCoalescent_backward_sampler_c(SEXP forward_probsSEXP, SEXP timesSEXP, SEXP leavesSEXP, SEXP neSEXP, SEXP boundSEXP, SEXP lineagesSEXP, SEXP bound_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type forward_probs(forward_probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type lineages(lineagesSEXP);
    Rcpp::traits::input_parameter< int >::type bound_size(bound_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_sampler_c(forward_probs, times, leaves, ne, bound, lineages, bound_size));
    return rcpp_result_gen;
END_RCPP
}
// sample_bounded_times_c
Rcpp::List sample_bounded_times_c(Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double ne, double bound, int nsam);
RcppExport SEXP _BoundedCoalescent_sample_bounded_times_c(SEXP timesSEXP, SEXP leavesSEXP, SEXP neSEXP, SEXP boundSEXP, SEXP nsamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type nsam(nsamSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_bounded_times_c(times, leaves, ne, bound, nsam));
    return rcpp_result_gen;
END_RCPP
}
// rejection_bounded_times_c
Rcpp::List rejection_bounded_times_c(Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double ne, double bound, int nsam);
RcppExport SEXP _BoundedCoalescent_rejection_bounded_times_c(SEXP timesSEXP, SEXP leavesSEXP, SEXP neSEXP, SEXP boundSEXP, SEXP nsamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type nsam(nsamSEXP);
    rcpp_result_gen = Rcpp::wrap(rejection_bounded_times_c(times, leaves, ne, bound, nsam));
    return rcpp_result_gen;
END_RCPP
}
// sample_topology_c
Rcpp::List sample_topology_c(Rcpp::NumericVector leaf_times, Rcpp::IntegerVector leaves, Rcpp::NumericVector coalescence_times);
RcppExport SEXP _BoundedCoalescent_sample_topology_c(SEXP leaf_timesSEXP, SEXP leavesSEXP, SEXP coalescence_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type leaf_times(leaf_timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type coalescence_times(coalescence_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_topology_c(leaf_times, leaves, coalescence_times));
    return rcpp_result_gen;
END_RCPP
}
// bounded_times_likelihood_c
double bounded_times_likelihood_c(Rcpp::NumericVector leaf_times, Rcpp::IntegerVector leaves, Rcpp::NumericVector coalescence_times, double ne, double bound);
RcppExport SEXP _BoundedCoalescent_bounded_times_likelihood_c(SEXP leaf_timesSEXP, SEXP leavesSEXP, SEXP coalescence_timesSEXP, SEXP neSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type leaf_times(leaf_timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type coalescence_times(coalescence_timesSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(bounded_times_likelihood_c(leaf_times, leaves, coalescence_times, ne, bound));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BoundedCoalescent_constrain_coalescences_c", (DL_FUNC) &_BoundedCoalescent_constrain_coalescences_c, 9},
    {"_BoundedCoalescent_homochronous_probability", (DL_FUNC) &_BoundedCoalescent_homochronous_probability, 4},
    {"_BoundedCoalescent_forward_algorithm_c", (DL_FUNC) &_BoundedCoalescent_forward_algorithm_c, 5},
    {"_BoundedCoalescent_backward_sampler_c", (DL_FUNC) &_BoundedCoalescent_backward_sampler_c, 7},
    {"_BoundedCoalescent_sample_bounded_times_c", (DL_FUNC) &_BoundedCoalescent_sample_bounded_times_c, 5},
    {"_BoundedCoalescent_rejection_bounded_times_c", (DL_FUNC) &_BoundedCoalescent_rejection_bounded_times_c, 5},
    {"_BoundedCoalescent_sample_topology_c", (DL_FUNC) &_BoundedCoalescent_sample_topology_c, 3},
    {"_BoundedCoalescent_bounded_times_likelihood_c", (DL_FUNC) &_BoundedCoalescent_bounded_times_likelihood_c, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_BoundedCoalescent(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
