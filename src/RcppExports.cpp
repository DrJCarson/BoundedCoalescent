// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// backward_sampler_c
Rcpp::List backward_sampler_c(Rcpp::NumericVector forward_probs, Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double ne, double bound, int bound_size);
RcppExport SEXP _BoundedCoalescent_backward_sampler_c(SEXP forward_probsSEXP, SEXP timesSEXP, SEXP leavesSEXP, SEXP neSEXP, SEXP boundSEXP, SEXP bound_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type forward_probs(forward_probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type bound_size(bound_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(backward_sampler_c(forward_probs, times, leaves, ne, bound, bound_size));
    return rcpp_result_gen;
END_RCPP
}
// separate_coalescences_c
Rcpp::NumericVector separate_coalescences_c(int coalescences, double time_lower, double time_upper, int lineages_upper, double ne);
RcppExport SEXP _BoundedCoalescent_separate_coalescences_c(SEXP coalescencesSEXP, SEXP time_lowerSEXP, SEXP time_upperSEXP, SEXP lineages_upperSEXP, SEXP neSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type coalescences(coalescencesSEXP);
    Rcpp::traits::input_parameter< double >::type time_lower(time_lowerSEXP);
    Rcpp::traits::input_parameter< double >::type time_upper(time_upperSEXP);
    Rcpp::traits::input_parameter< int >::type lineages_upper(lineages_upperSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    rcpp_result_gen = Rcpp::wrap(separate_coalescences_c(coalescences, time_lower, time_upper, lineages_upper, ne));
    return rcpp_result_gen;
END_RCPP
}
// constrain_coalescences_c
Rcpp::DataFrame constrain_coalescences_c(Rcpp::IntegerVector sample, Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double ne, double bound);
RcppExport SEXP _BoundedCoalescent_constrain_coalescences_c(SEXP sampleSEXP, SEXP timesSEXP, SEXP leavesSEXP, SEXP neSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(constrain_coalescences_c(sample, times, leaves, ne, bound));
    return rcpp_result_gen;
END_RCPP
}
// block_coalescences_c
Rcpp::DataFrame block_coalescences_c(Rcpp::IntegerVector sample, Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double bound);
RcppExport SEXP _BoundedCoalescent_block_coalescences_c(SEXP sampleSEXP, SEXP timesSEXP, SEXP leavesSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(block_coalescences_c(sample, times, leaves, bound));
    return rcpp_result_gen;
END_RCPP
}
// forward_algorithm_c
Rcpp::NumericVector forward_algorithm_c(Rcpp::NumericVector times, Rcpp::IntegerVector leaves, double ne, double bound);
RcppExport SEXP _BoundedCoalescent_forward_algorithm_c(SEXP timesSEXP, SEXP leavesSEXP, SEXP neSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type leaves(leavesSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_algorithm_c(times, leaves, ne, bound));
    return rcpp_result_gen;
END_RCPP
}
// homochronous_probability
double homochronous_probability(int i, int j, double dt, double ne);
RcppExport SEXP _BoundedCoalescent_homochronous_probability(SEXP iSEXP, SEXP jSEXP, SEXP dtSEXP, SEXP neSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type ne(neSEXP);
    rcpp_result_gen = Rcpp::wrap(homochronous_probability(i, j, dt, ne));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BoundedCoalescent_backward_sampler_c", (DL_FUNC) &_BoundedCoalescent_backward_sampler_c, 6},
    {"_BoundedCoalescent_separate_coalescences_c", (DL_FUNC) &_BoundedCoalescent_separate_coalescences_c, 5},
    {"_BoundedCoalescent_constrain_coalescences_c", (DL_FUNC) &_BoundedCoalescent_constrain_coalescences_c, 5},
    {"_BoundedCoalescent_block_coalescences_c", (DL_FUNC) &_BoundedCoalescent_block_coalescences_c, 4},
    {"_BoundedCoalescent_forward_algorithm_c", (DL_FUNC) &_BoundedCoalescent_forward_algorithm_c, 4},
    {"_BoundedCoalescent_homochronous_probability", (DL_FUNC) &_BoundedCoalescent_homochronous_probability, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_BoundedCoalescent(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
